{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 5,
    "pending": 0,
    "failures": 1,
    "start": "2018-06-12T08:55:34.671Z",
    "end": "2018-06-12T08:55:58.835Z",
    "duration": 24164,
    "testsRegistered": 6,
    "passPercent": 83.3,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "61c1df9f-9987-41ec-99ae-56058543a056",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "232318b9-8e5e-4634-bd79-cc51251b570a",
        "title": "Validate the process",
        "fullFile": "C:\\Users\\vgamaga\\Documents\\Node.js\\MOCA\\example_api_test2\\test\\TestAll.js",
        "file": "\\TestAll.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: Post request to get pi token",
            "fullTitle": "Validate the process \"before all\" hook: Post request to get pi token",
            "timedOut": false,
            "duration": 852,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "server_1\n    .post('/tokens?useJwt=true')\n                .set(\"content-type\",\"application/json\")\n                .send({\n                \"userName\":\"sfc_system\",\n                \"password\":\"J6rfS39Js2xv49zZ\"\n            })\n               \n    .expect(201)\n    .end(function(error,response,body){\n            if(!error){\n                console.log(response.body);\n                chai.expect(response.body.status).to.equal('success');\n                chai.expect(response.body).to.have.property(\"data\");\n                var token = response.body.data;\n                TokenStorage.setAuthToken(token);\n                //console.log(TokenStorage.getAuthToken());\n                done();\n                \n            }\n            else\n                console.log(error);\n                \n                \n    })\n         \n          console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {},
            "isRoot": false,
            "uuid": "ba117916-8884-46cf-a858-f02a05fb7804",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "Post request to create new deck",
            "fullTitle": "Validate the process Post request to create new deck",
            "timedOut": false,
            "duration": 721,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// this.timeout(91000);\n    server_2\n        .post('/api/decks/')\n                    .set(\"content-type\",\"application/json\")\n                      .set(\"X-Authorization\",TokenStorage.getAuthToken())\n                    .send({\n                        \"title\": \"Research and Development\",\n                        \"book\": {},\n                        \"purchaseInfo\": {\n                            \"price\": 0\n                        },\n                        \"notificationSettings\": {\n                            \"areNotificationsEnabled\": false\n                        },\n                        \"epochTime\": {\n                            \"createdAt\": 1525108089681,\n                            \"updatedAt\": 1525108089681\n                        },\n                        \"userId\": \"caftraining\",\n                        \"createdAt\": \"2018-04-30T17:08:09.681Z\",\n                        \"updatedAt\": \"2018-04-30T17:08:09.682Z\",\n                        \"archived\": false,\n                        \"cardPreview\": false,\n                        \"noOfCards\": 0,\n                        \"progress\": 0,\n                        \"downloads\": 0,\n                        \"starred\": false,\n                        \"examReminder\": {},\n                        \"expert\": false\n                })\n                   \n        .expect(201)\n        .end(function(error,response,body,){\n                if(!error){\n                    \n                    chai.expect(response.body.title).to.equal('Research and Development');\n                    chai.expect(response.body).to.have.property(\"id\");\n                    chai.expect(response.body).to.have.property(\"userId\");\n                    chai.expect(response.body).to.have.property(\"userDeck\");\n                    chai.expect(response.body).to.have.property(\"createdAt\");\n                    chai.expect(response.body).to.have.property(\"expert\");\n                    chai.expect(response.body).to.have.property(\"starred\");\n                    var ID = response.body.id;\n                    UserIDStorage.setUserId(ID);\n                   // console.log(UserIDStorage.getUserId());\n                   console.log(response.body);\n                   done();\n                    \n                    \n                }\n                else\n                    console.log(error);\n                    \n                    \n        })    \n       \n        console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {},
            "isRoot": false,
            "uuid": "8c1b020d-0492-4a46-b76c-353180a148f5",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get request to get created deck",
            "fullTitle": "Validate the process Get request to get created deck",
            "timedOut": false,
            "duration": 637,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//this.timeout(92000);\n\n  \n      var pathname = '/api/decks/';\n      var userPathname = UserIDStorage.getUserId()\n      url = pathname.concat(userPathname)\n  server_3\n    .get(url)\n   \n                .set(\"X-Authorization\",TokenStorage.getAuthToken())\n                \n                   \n        .expect(200)\n        .end(function(error,response,body){\n                if(!error){\n                    \n                    chai.expect(response.body.title).to.equal('Research and Development');\n                    chai.expect(response.body.id).to.equal(userPathname);\n                    chai.expect(response.body).to.have.property(\"id\");\n                    chai.expect(response.body).to.have.property(\"userId\");\n                    //chai.expect(response.body).to.have.property(\"userDeck\");\n                    chai.expect(response.body).to.have.property(\"createdAt\");\n                    chai.expect(response.body).to.have.property(\"expert\");\n                    chai.expect(response.body).to.have.property(\"starred\");\n                    console.log(response.body);\n                    done();\n                    \n                }\n                else\n                    console.log(error);\n                   \n                    \n        })\n          \n        \n        console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {},
            "isRoot": false,
            "uuid": "356af241-4a87-497d-a317-0d4e81e7d573",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Put request to edit a user deck",
            "fullTitle": "Validate the process Put request to edit a user deck",
            "timedOut": false,
            "duration": 642,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//this.timeout(93000);\nvar pathname = '/api/decks/';\nvar userPathname = UserIDStorage.getUserId()\nurl = pathname.concat(userPathname)\nserver_3\n    .put(url)\n                .set(\"content-type\",\"application/json\")\n                .set(\"X-Authorization\",TokenStorage.getAuthToken())\n                .send({\n                    \n                        \"title\": \"Research and Development EDITED\",\n                        \"book\": {},\n                        \"purchaseInfo\": {\n                            \"price\": 0\n                        },\n                        \"notificationSettings\": {\n                            \"areNotificationsEnabled\": false\n                        },\n                        \"epochTime\": {\n                            \"createdAt\": 1525108089681,\n                            \"updatedAt\": 1525108089681\n                        },\n                        \"userId\": \"caftraining\",\n                        \"createdAt\": \"2018-04-30T17:08:09.681Z\",\n                        \"updatedAt\": \"2018-04-30T17:08:09.682Z\",\n                        \"archived\": false,\n                        \"cardPreview\": false,\n                        \"noOfCards\": 0,\n                        \"progress\": 0,\n                        \"downloads\": 0,\n                        \"starred\": false,\n                        \"examReminder\": {},\n                        \"expert\": false\n                    \n            })\n               \n    .expect(200)\n    .end(function(error,response,body){\n            if(!error){\n                \n                chai.expect(response.body.title).to.equal('Research and Development EDITED');\n                chai.expect(response.body.id).to.equal(userPathname);\n                chai.expect(response.body).to.have.property(\"id\");\n                chai.expect(response.body).to.have.property(\"userId\");\n               // chai.expect(response.body).to.have.property(\"userDeck\");\n                chai.expect(response.body).to.have.property(\"createdAt\");\n                chai.expect(response.body).to.have.property(\"expert\");\n                chai.expect(response.body).to.have.property(\"starred\");\n                console.log(response.body);\n                done();\n              \n                \n            }\n            else\n                console.log(error);\n                \n                \n    })    \n    console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {},
            "isRoot": false,
            "uuid": "e322c1c3-f360-44c4-9bd7-34b229e8840a",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get request to get edited deck",
            "fullTitle": "Validate the process Get request to get edited deck",
            "timedOut": false,
            "duration": 634,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "//this.timeout(94000);\nvar pathname = '/api/decks/';\nvar userPathname = UserIDStorage.getUserId()\nurl = pathname.concat(userPathname)\nserver_2\n    .get(url)\n            .set(\"X-Authorization\",TokenStorage.getAuthToken())\n            \n               \n    .expect(200)\n    .end(function(error,response,body){\n            if(!error){\n                \n                chai.expect(response.body.title).to.equal('Research and Development EDITED');\n                chai.expect(response.body.id).to.equal(userPathname);\n                chai.expect(response.body).to.have.property(\"id\");\n                chai.expect(response.body).to.have.property(\"userId\");\n                chai.expect(response.body).to.have.property(\"userDeck\");\n                chai.expect(response.body).to.have.property(\"createdAt\");\n                chai.expect(response.body).to.have.property(\"expert\");\n                chai.expect(response.body).to.have.property(\"starred\");\n                console.log(response.body);\n                done();\n                \n            }\n            else\n                console.log(error);\n               \n                \n    })\n      \n    \n    console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {},
            "isRoot": false,
            "uuid": "c5723e38-1643-4988-ad93-af32162a859c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Delete request to delete a deck",
            "fullTitle": "Validate the process Delete request to delete a deck",
            "timedOut": true,
            "duration": 20011,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "//this.timeout(95000);\nvar pathname = '/api/decks/';\nvar userPathname = UserIDStorage.getUserId()\nurl = pathname.concat(userPathname)\nserver_3\n    .delete(url)\n            .set(\"X-Authorization\",TokenStorage.getAuthToken())\n            \n               \n    .expect(200)\n    .end(function(error,response,body){\n            if(!error){\n                \n                console.log(response.body);\n                done();\n                \n            }\n            else\n                console.log(error);\n                \n                \n    })\n      \n     console.log('--------------------------------------------------------------------------------------------------------');",
            "err": {
              "message": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\vgamaga\\Documents\\Node.js\\MOCA\\example_api_test2\\test\\TestAll.js)",
              "estack": "Error: Timeout of 20000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves. (C:\\Users\\vgamaga\\Documents\\Node.js\\MOCA\\example_api_test2\\test\\TestAll.js)"
            },
            "isRoot": false,
            "uuid": "65eb827d-7a51-49ca-bfd2-ecacafd1966e",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Get request to get deleted deck",
            "fullTitle": "Validate the process Get request to get deleted deck",
            "timedOut": false,
            "duration": 637,
            "state": "passed",
            "speed": "slow",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// this.timeout(96000);\n var pathname = '/api/decks/';\n var userPathname = UserIDStorage.getUserId()\n url = pathname.concat(userPathname)\n server_3\n     .get(url)\n             .set(\"X-Authorization\",TokenStorage.getAuthToken())\n             \n                \n     .expect(400)\n     .end(function(error,response,body){\n             if(!error){\n                 \n         \n                 console.log(response.body);\n                 done();\n                 \n             }\n             else\n                 console.log(error);\n                 \n                 \n     })",
            "err": {},
            "isRoot": false,
            "uuid": "d963f4bb-78e0-4ea6-b4f4-342a02f9d8b0",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "8c1b020d-0492-4a46-b76c-353180a148f5",
          "356af241-4a87-497d-a317-0d4e81e7d573",
          "e322c1c3-f360-44c4-9bd7-34b229e8840a",
          "c5723e38-1643-4988-ad93-af32162a859c",
          "d963f4bb-78e0-4ea6-b4f4-342a02f9d8b0"
        ],
        "failures": [
          "65eb827d-7a51-49ca-bfd2-ecacafd1966e"
        ],
        "pending": [],
        "skipped": [],
        "duration": 23282,
        "root": false,
        "rootEmpty": false,
        "_timeout": 20000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}